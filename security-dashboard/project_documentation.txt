Project Documentation
===================

Directory Structure
------------------

├── api
│   ├── __init__.py
│   ├── main.py
│   ├── models.py
│   ├── test_api.py
│   ├── test_websocket.html
│   ├── test_websocket.py
│   └── utils.py
├── public
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── server
│   └── server.js
├── src
│   ├── app
│   │   ├── fonts
│   │   │   ├── GeistMonoVF.woff
│   │   │   └── GeistVF.woff
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components
│   │   ├── dashboard
│   │   │   ├── CodeViewer.tsx
│   │   │   └── security-dashboard.tsx
│   │   └── ui
│   │       ├── alert.tsx
│   │       ├── card.tsx
│   │       └── progress.tsx
│   └── lib
│       └── utils.ts
├── next.config.js
├── postcss.config.js
├── postcss.config.mjs
├── README.md
├── requirements.txt
├── tailwind.config.js
└── tsconfig.json

File Contents
-------------

File: api/__init__.py

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------


File: api/main.py

--------------------------------------------------------------------------------
from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
from typing import List, Dict
import psutil
import asyncio
import uuid
from collections import deque
from pydantic import BaseModel

app = FastAPI(title="Cyber Command API")

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Your Next.js frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Data Models
class BattleLog(BaseModel):
    message: str
    timestamp: str
    severity: str

class DefenseAction(BaseModel):
    id: str
    timestamp: str
    type: str
    code: str
    status: str
    description: str

# Global Storage
active_connections: List[WebSocket] = []
battle_logs = deque(maxlen=100)
defense_actions: List[Dict] = []

# Utility Functions
def get_network_speed():
    """Get current network counters"""
    net = psutil.net_io_counters()
    return {
        "bytes_sent": net.bytes_sent,
        "bytes_recv": net.bytes_recv
    }

async def broadcast_to_clients(message_type: str, data: dict):
    """Broadcast updates to all connected clients"""
    for connection in active_connections:
        try:
            await connection.send_json({
                "type": message_type,
                "data": data
            })
        except:
            pass

# API Routes
@app.get("/")
async def root():
    return {
        "message": "Cyber Command API is running",
        "version": "1.0.0",
        "status": "operational"
    }

@app.get("/system-metrics")
async def get_metrics():
    """Get current system metrics"""
    network = get_network_speed()
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    return {
        "cpu_percent": psutil.cpu_percent(),
        "memory_percent": memory.percent,
        "memory_used": memory.used,
        "memory_total": memory.total,
        "disk_usage": disk.percent,
        "disk_used": disk.used,
        "disk_total": disk.total,
        "network_bytes_sent": network["bytes_sent"],
        "network_bytes_recv": network["bytes_recv"],
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/battle-log")
async def add_battle_log(log: BattleLog):
    """Add a new battle log entry"""
    log_entry = {
        "message": log.message,
        "timestamp": log.timestamp,
        "severity": log.severity
    }
    battle_logs.append(log_entry)
    
    await broadcast_to_clients("battle_logs", list(battle_logs))
    return {"status": "success"}

@app.post("/api/defense-action")
async def add_defense_action(action: DefenseAction):
    """Add a new defense action"""
    action_entry = {
        "id": action.id or str(uuid.uuid4()),
        "timestamp": action.timestamp,
        "type": action.type,
        "code": action.code,
        "status": action.status,
        "description": action.description
    }
    defense_actions.append(action_entry)
    
    await broadcast_to_clients("defense_actions", defense_actions)
    return {"status": "success"}

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    active_connections.append(websocket)
    
    try:
        while True:
            # Send system metrics
            metrics = await get_metrics()
            await websocket.send_json({
                "type": "system_metrics",
                "data": metrics
            })
            
            # Send battle logs
            await websocket.send_json({
                "type": "battle_logs",
                "data": list(battle_logs)
            })
            
            # Send defense actions
            await websocket.send_json({
                "type": "defense_actions",
                "data": defense_actions
            })
            
            await asyncio.sleep(1)
            
    except Exception as e:
        print(f"WebSocket error: {e}")
    finally:
        active_connections.remove(websocket)

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "connections": len(active_connections),
        "battle_logs": len(battle_logs),
        "defense_actions": len(defense_actions)
    }

# Dummy Data
DUMMY_DEFENSE_ACTIONS = [
    {
        "id": str(uuid.uuid4()),
        "timestamp": datetime.now().isoformat(),
        "type": "firewall",
        "status": "active",
        "description": "Updating firewall rules to block suspicious IP range",
        "code": """iptables -A INPUT -s 192.168.1.0/24 -j DROP
iptables -A OUTPUT -d 192.168.1.0/24 -j DROP
systemctl restart firewalld"""
    },
    {
        "id": str(uuid.uuid4()),
        "timestamp": datetime.now().isoformat(),
        "type": "ids",
        "status": "completed",
        "description": "Updated Snort rules for SQL injection detection",
        "code": """alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (
  msg:"SQL Injection Attempt";
  flow:to_server,established;
  content:"UNION SELECT"; nocase;
  sid:1000001; rev:1;
)"""
    },
    {
        "id": str(uuid.uuid4()),
        "timestamp": datetime.now().isoformat(),
        "type": "authentication",
        "status": "pending",
        "description": "Implementing additional 2FA checks",
        "code": """from django.contrib.auth.decorators import user_passes_test
def require_2fa(view_func):
    def check_2fa(user):
        return user.is_authenticated and user.has_2fa_enabled
    decorated_view = user_passes_test(check_2fa)(view_func)
    return decorated_view"""
    }
]

DUMMY_BATTLE_LOGS = [
    {"message": "System startup initiated", "severity": "info"},
    {"message": "Firewall rules updated", "severity": "info"},
    {"message": "Suspicious login attempt blocked", "severity": "warning"},
    {"message": "Port scan detected", "severity": "alert"},
    {"message": "Multiple failed login attempts", "severity": "warning"},
    {"message": "System update completed", "severity": "info"},
    {"message": "Network anomaly detected", "severity": "alert"},
    {"message": "Backup process completed", "severity": "info"},
    {"message": "Potential data breach attempt", "severity": "critical"},
    {"message": "IDS signature updated", "severity": "info"}
]

@app.on_event("startup")
async def add_dummy_data():
    """Initialize with dummy data if none exists"""
    if len(battle_logs) == 0:
        for log in DUMMY_BATTLE_LOGS:
            battle_logs.append({
                **log,
                "timestamp": datetime.now().isoformat()
            })
    
    if len(defense_actions) == 0:
        defense_actions.extend(DUMMY_DEFENSE_ACTIONS)


@app.websocket("/ws/defense")
async def defense_websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    
    # Sample defense templates
    defense_templates = [
        {
            "description": "Generating firewall rules for detected threat",
            "code": """iptables -A INPUT -s {ip} -j DROP
iptables -A OUTPUT -d malicious-domain.com -j DROP
systemctl restart firewalld""",
        },
        {
            "description": "Implementing rate limiting for suspicious activity",
            "code": """limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;
limit_req zone=mylimit burst=20 nodelay;
deny all;""",
        },
        {
            "description": "Deploying additional authentication checks",
            "code": """@require_authentication
def secure_endpoint():
    if not verify_2fa(current_user):
        raise SecurityException("2FA Required")
    if is_suspicious_ip(request.remote_addr):
        raise SecurityException("IP Blocked")
    return proceed()""",
        }
    ]
    
    try:
        while True:
            # Generate random defense action
            template = random.choice(defense_templates)
            action = {
                "id": str(random.randint(1000, 9999)),
                "timestamp": datetime.now().isoformat(),
                "description": template["description"],
                "code": template["code"].format(
                    ip=f"{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"
                ),
                "status": "active"
            }
            
            # Send defense update
            await websocket.send_json({
                "type": "defense_update",
                "action": action
            })
            
            # Wait before sending next update
            await asyncio.sleep(random.randint(8, 15))
    except Exception as e:
        print(f"Defense WebSocket error: {e}")
--------------------------------------------------------------------------------


File: api/models.py

--------------------------------------------------------------------------------
from datetime import datetime
from pydantic import BaseModel
from typing import Optional

class SystemMetrics(BaseModel):
    cpu_percent: float
    memory_percent: float
    disk_usage: float
    network_bytes_sent: int
    network_bytes_recv: int

class BattleLog(BaseModel):
    message: str
    timestamp: datetime
    severity: str = "info"  # "info", "warning", "alert", "critical"

class SystemStatus(BaseModel):
    name: str
    status: str  # "operational", "compromised", "offline"
    load: float
    last_heartbeat: datetime
    ip_address: str
--------------------------------------------------------------------------------


File: api/test_api.py

--------------------------------------------------------------------------------
import asyncio
import websockets
import json
import requests
import time
from datetime import datetime

def test_health():
    response = requests.get('http://localhost:8000/health')
    print("\n=== Health Check ===")
    print(f"Status Code: {response.status_code}")
    print(f"Response: {json.dumps(response.json(), indent=2)}")

def test_metrics():
    response = requests.get('http://localhost:8000/system-metrics')
    print("\n=== System Metrics ===")
    print(f"Status Code: {response.status_code}")
    print(f"Response: {json.dumps(response.json(), indent=2)}")

async def test_websocket_connection():
    print("\n=== WebSocket Test ===")
    uri = "ws://localhost:8000/ws"
    async with websockets.connect(uri) as websocket:
        print("Connected to WebSocket")
        try:
            # Listen for 5 messages then exit
            for i in range(5):
                response = await websocket.recv()
                data = json.loads(response)
                print(f"\nMessage {i+1}:")
                print(json.dumps(data, indent=2))
                await asyncio.sleep(1)
        except websockets.exceptions.ConnectionClosed:
            print("Connection closed")

def test_battle_log():
    test_log = {
        "message": "Test alert from API test",
        "timestamp": datetime.now().isoformat(),
        "severity": "warning"
    }
    
    response = requests.post(
        'http://localhost:8000/api/battle-log',
        json=test_log
    )
    print("\n=== Battle Log Test ===")
    print(f"Status Code: {response.status_code}")
    print(f"Response: {json.dumps(response.json(), indent=2)}")

async def run_tests():
    print("Starting API Tests...")
    
    # Test REST endpoints
    test_health()
    test_metrics()
    test_battle_log()
    
    # Test WebSocket
    await test_websocket_connection()
    
    print("\nTests completed!")

if __name__ == "__main__":
    # Install required packages if not already installed
    # pip install requests websockets
    
    asyncio.get_event_loop().run_until_complete(run_tests())
--------------------------------------------------------------------------------


File: api/test_websocket.html

--------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Test</title>
    <style>
        body { font-family: monospace; padding: 20px; }
        #messages { 
            background: #f4f4f4; 
            padding: 20px; 
            border-radius: 5px;
            max-height: 400px;
            overflow-y: auto;
        }
        .message {
            margin: 10px 0;
            padding: 10px;
            background: white;
            border-radius: 3px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .status { 
            padding: 10px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .connected { background: #d4edda; color: #155724; }
        .disconnected { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div id="status" class="status disconnected">Disconnected</div>
    <button onclick="connect()">Connect</button>
    <button onclick="disconnect()">Disconnect</button>
    <div id="messages"></div>

    <script>
        let ws = null;
        const messagesDiv = document.getElementById('messages');
        const statusDiv = document.getElementById('status');

        function connect() {
            if (ws) {
                ws.close();
            }

            ws = new WebSocket('ws://localhost:8000/ws');
            
            ws.onopen = () => {
                statusDiv.textContent = 'Connected';
                statusDiv.className = 'status connected';
                addMessage('Connected to WebSocket');
            };

            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                addMessage(JSON.stringify(data, null, 2));
            };

            ws.onclose = () => {
                statusDiv.textContent = 'Disconnected';
                statusDiv.className = 'status disconnected';
                addMessage('Disconnected from WebSocket');
                ws = null;
            };

            ws.onerror = (error) => {
                addMessage('Error: ' + JSON.stringify(error));
            };
        }

        function disconnect() {
            if (ws) {
                ws.close();
            }
        }

        function addMessage(message) {
            const div = document.createElement('div');
            div.className = 'message';
            div.textContent = message;
            messagesDiv.insertBefore(div, messagesDiv.firstChild);
        }
    </script>
</body>
</html>
--------------------------------------------------------------------------------


File: api/test_websocket.py

--------------------------------------------------------------------------------
import asyncio
import websockets
import json

async def test_websocket():
    uri = "ws://localhost:8000/ws"
    async with websockets.connect(uri) as websocket:
        print("Connected to WebSocket")
        try:
            while True:
                response = await websocket.recv()
                data = json.loads(response)
                print(f"Received data: {json.dumps(data, indent=2)}")
        except websockets.exceptions.ConnectionClosed:
            print("Connection closed")

# Run the test
asyncio.get_event_loop().run_until_complete(test_websocket())
--------------------------------------------------------------------------------


File: api/utils.py

--------------------------------------------------------------------------------
import psutil
from datetime import datetime
from .models import SystemMetrics, SystemStatus

def get_system_metrics() -> SystemMetrics:
    """Get current system metrics using psutil"""
    cpu = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    network = psutil.net_io_counters()
    
    return SystemMetrics(
        cpu_percent=cpu,
        memory_percent=memory,
        disk_usage=disk,
        network_bytes_sent=network.bytes_sent,
        network_bytes_recv=network.bytes_recv
    )

def get_system_status() -> SystemStatus:
    """Get overall system status"""
    try:
        # Get the first available network interface's IP
        ip = [i for i in psutil.net_if_addrs().values()][0][0].address
    except:
        ip = "127.0.0.1"
        
    return SystemStatus(
        name="MainSystem",
        status="operational",
        load=psutil.getloadavg()[0],
        last_heartbeat=datetime.now(),
        ip_address=ip
    )

def format_bytes(bytes: int) -> str:
    """Convert bytes to human readable format"""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes < 1024:
            return f"{bytes:.2f} {unit}"
        bytes /= 1024
    return f"{bytes:.2f} PB"
--------------------------------------------------------------------------------


File: public/file.svg

--------------------------------------------------------------------------------
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
--------------------------------------------------------------------------------


File: public/globe.svg

--------------------------------------------------------------------------------
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
--------------------------------------------------------------------------------


File: public/next.svg

--------------------------------------------------------------------------------
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
--------------------------------------------------------------------------------


File: public/vercel.svg

--------------------------------------------------------------------------------
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
--------------------------------------------------------------------------------


File: public/window.svg

--------------------------------------------------------------------------------
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
--------------------------------------------------------------------------------


File: server/server.js

--------------------------------------------------------------------------------
const express = require('express');
const WebSocket = require('ws');
const cors = require('cors');
const http = require('http');

// Initialize Express app
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Store latest data
let currentMetrics = {
  cpu_percent: 0,
  memory_percent: 0,
  disk_usage: 0,
  network_bytes_sent: 0,
  network_bytes_recv: 0,
  memory_used: 0,
  memory_total: 0,
  disk_used: 0,
  disk_total: 0
};

let battleLogs = [];
let defenseActions = [];
let defenseCode = [];

// Middleware
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],
  credentials: true,
  maxAge: 86400 // 24 hours
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Helper function to create API response format
const createApiResponse = (content) => ({
  model: "c2-defender-v1",
  created_at: new Date().toISOString(),
  message: {
    role: "system",
    content: content
  },
  done_reason: "completed",
  done: true
});

// Broadcast helper function
const broadcastToClients = (type, data) => {
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify({ type, data }));
    }
  });
};

// REST Endpoints
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    connections: wss.clients.size,
    battle_logs: battleLogs.length,
    defense_actions: defenseActions.length,
    defense_code: defenseCode.length
  });
});

app.get('/system-metrics', (req, res) => {
  res.json(createApiResponse({
    ...currentMetrics,
    code: defenseCode
  }));
});

app.get('/battle-logs', (req, res) => {
  res.json(createApiResponse(battleLogs));
});

app.get('/defense-code', (req, res) => {
  res.json(createApiResponse(defenseCode));
});

// New endpoint to get defense actions
app.get('/defense-actions', (req, res) => {
  // Optional query parameters for filtering
  const { limit, status, timeframe } = req.query;
  let filteredActions = [...defenseActions];

  // Apply filters if provided
  if (status) {
    filteredActions = filteredActions.filter(action => action.status === status);
  }

  if (timeframe) {
    const timeframeMs = parseInt(timeframe) * 60 * 1000; // Convert minutes to milliseconds
    const cutoffTime = Date.now() - timeframeMs;
    filteredActions = filteredActions.filter(action => 
      new Date(action.timestamp).getTime() > cutoffTime
    );
  }

  // Apply limit if provided
  if (limit) {
    filteredActions = filteredActions.slice(-parseInt(limit));
  }

  res.json(createApiResponse({
    total: defenseActions.length,
    filtered: filteredActions.length,
    actions: filteredActions
  }));
});

app.post('/battle-logs', (req, res) => {
  const newLog = {
    id: Date.now().toString(),
    timestamp: new Date().toISOString(),
    ...req.body
  };
  
  battleLogs.push(newLog);
  
  if (battleLogs.length > 100) {
    battleLogs = battleLogs.slice(-100);
  }
  
  broadcastToClients('battle_logs', battleLogs);
  res.json(createApiResponse({ status: 'success' }));
});

app.post('/defense-action', (req, res) => {
  const code = req.body.code || req.body;  // Accept either {code: string} or direct string
  
  const newAction = {
    id: Date.now().toString(),
    timestamp: new Date().toISOString(),
    status: 'active',
    code: typeof code === 'string' ? code : String(code)
  };
  
  if (newAction.code) {
    defenseCode.unshift(newAction.code);
    defenseActions.push(newAction);
    
    if (defenseCode.length > 100) {
      defenseCode = defenseCode.slice(0, 100);
    }
    if (defenseActions.length > 100) {
      defenseActions = defenseActions.slice(-100);
    }
    
    broadcastToClients('defense_update', newAction);
  }
  
  res.json(createApiResponse({
    status: 'success',
    action: newAction
  }));
});

// WebSocket connection handling
wss.on('connection', (ws) => {
  console.log('Client connected');
  
  const initialData = createApiResponse({
    type: 'initial_data',
    data: {
      metrics: currentMetrics,
      logs: battleLogs,
      defenseActions: defenseActions,
      code: defenseCode
    }
  });
  ws.send(JSON.stringify(initialData));

  ws.on('close', () => {
    console.log('Client disconnected');
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json(createApiResponse({
    error: 'Internal server error',
    message: err.message
  }));
});

// Start server
const PORT = process.env.PORT || 8000;
server.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`WebSocket server available at ws://localhost:${PORT}`);
  console.log(`HTTP server available at http://localhost:${PORT}`);
});
--------------------------------------------------------------------------------


File: src/app/globals.css

--------------------------------------------------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
--------------------------------------------------------------------------------


File: src/app/layout.tsx

--------------------------------------------------------------------------------
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Security Dashboard',
  description: 'Network Security Lab Dashboard',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
--------------------------------------------------------------------------------


File: src/app/page.tsx

--------------------------------------------------------------------------------
import SecurityDashboard from '@/components/dashboard/security-dashboard'

export default function Home() {
  return (
    <main className="min-h-screen bg-gray-100">
      <SecurityDashboard />
    </main>
  )
}
--------------------------------------------------------------------------------


File: src/components/dashboard/CodeViewer.tsx

--------------------------------------------------------------------------------
import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Terminal, Shield } from 'lucide-react';

interface DefenseAction {
  id: string;
  timestamp: string;
  code: string;
  status: 'active' | 'pending' | 'completed';
  description: string;
}

interface CodeViewerProps {
  defenseActions: DefenseAction[];
}

const CodeViewer: React.FC<CodeViewerProps> = () => {
  const [currentCode, setCurrentCode] = useState<string>('');
  const [isTyping, setIsTyping] = useState(false);
  const [allCode, setAllCode] = useState<string[]>([]);
  const wsRef = useRef<WebSocket | null>(null);

  const extractAndFormatCode = (data: any): string => {
    try {
      // Navigate to the code array in the nested structure
      const codeArray = data?.message?.content?.code;
      
      if (Array.isArray(codeArray)) {
        // Map through the code array and stringify any objects
        const formattedCode = codeArray.map(item => {
          if (typeof item === 'object' && item !== null) {
            return JSON.stringify(item, null, 2);
          }
          return item;
        });
        
        // Join array items with newlines if there are multiple items
        return formattedCode.join('\n');
      }
      return '// No code available';
    } catch (error) {
      console.error('Error formatting code:', error);
      return '// Error formatting code';
    }
  };

  // Fetch all code from API
  useEffect(() => {
    const fetchCode = async () => {
      try {
        const response = await fetch('http://localhost:8000/system-metrics');
        const data = await response.json();
        if (data) {
          const formattedCode = extractAndFormatCode(data);
          setAllCode([formattedCode]);
        }
      } catch (error) {
        console.error('Error fetching code:', error);
      }
    };

    fetchCode();
  }, []);

  // WebSocket connection
  useEffect(() => {
    const connectWebSocket = () => {
      const ws = new WebSocket('ws://localhost:8000/ws/defense');
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('Defense WebSocket Connected');
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          if (data.type === 'defense_update') {
            const formattedCode = extractAndFormatCode(data);
            setAllCode(prev => [formattedCode, ...prev]);
            animateNewCode(formattedCode);
          }
        } catch (error) {
          console.error('Error processing websocket message:', error);
        }
      };

      ws.onclose = () => {
        console.log('Defense WebSocket Disconnected');
        setTimeout(connectWebSocket, 5000);
      };
    };

    connectWebSocket();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, []);

  // Typing animation for new code
  const animateNewCode = (code: string) => {
    setIsTyping(true);
    let index = 0;
    setCurrentCode('');
    
    const typeCode = () => {
      if (index < code.length) {
        setCurrentCode(prev => prev + code.charAt(index));
        index++;
        setTimeout(typeCode, Math.random() * 30 + 20);
      } else {
        setIsTyping(false);
      }
    };
    
    typeCode();
  };

  return (
    <Card className="bg-zinc-900 border-zinc-800">
      <CardHeader className="pb-2">
        <CardTitle className="text-sm font-mono text-zinc-400 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Shield className="h-4 w-4 text-cyan-500" />
            LIVE DEFENSE GENERATION
          </div>
          <div className="flex items-center gap-2">
            <span className={`text-[10px] px-2 py-1 rounded ${isTyping ? 'bg-cyan-500/10 text-cyan-500 animate-pulse' : 'bg-zinc-800 text-zinc-400'}`}>
              {isTyping ? 'GENERATING DEFENSE' : 'MONITORING'}
            </span>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="bg-black/50 rounded-lg p-4 border border-zinc-800">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <Terminal className="h-4 w-4 text-cyan-500" />
                <span className="text-xs font-mono text-zinc-400">
                  DEFENSE CODE
                </span>
              </div>
            </div>
            <pre className="bg-black rounded p-2 overflow-x-auto min-h-[200px] max-h-[600px] overflow-y-auto">
              <code className="text-xs font-mono text-cyan-500">
                {currentCode || allCode.join('\n\n') || '// Awaiting defense code...'}
              </code>
            </pre>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default CodeViewer;
--------------------------------------------------------------------------------


File: src/components/dashboard/security-dashboard.tsx

--------------------------------------------------------------------------------
'use client'

import React, { useState, useEffect, useRef } from 'react';
import { Shield, Cpu, Activity, AlertTriangle, TrendingUp, Radio, Target, CrosshairIcon, ShieldAlert, Terminal, Network, ChevronRight, Wifi, Box } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from "@/components/ui/progress";
import CodeViewer from './CodeViewer';

// Types
interface SystemMetrics {
  cpu_percent: number;
  memory_percent: number;
  disk_usage: number;
  network_bytes_sent: number;
  network_bytes_recv: number;
  timestamp?: string;
  memory_used?: number;
  memory_total?: number;
  disk_used?: number;
  disk_total?: number;
}

interface ApiResponse<T> {
  model: string;
  created_at: string;
  message: {
    role: string;
    content: T;
  };
  done_reason: string;
  done: boolean;
}

interface BattleLog {
  id: string;
  message: string;
  timestamp: string;
  severity: 'info' | 'warning' | 'alert' | 'critical';
  source_ip: string;
  formatted: string;
}

interface DefenseAction {
  id: string;
  timestamp: string;
  type: 'firewall' | 'ids' | 'authentication' | 'encryption';
  code: string;
  status: 'active' | 'pending' | 'completed';
  description: string;
}

interface WebSocketMessage {
  type: 'system_metrics' | 'battle_logs' | 'defense_actions' | 'initial_data';
  data: SystemMetrics | BattleLog[] | DefenseAction[] | {
    metrics?: SystemMetrics;
    logs?: BattleLog[];
    defenseActions?: DefenseAction[];
  };
}

interface WebSocketData {
  metrics?: SystemMetrics;
  logs?: BattleLog[];
  defenseActions?: DefenseAction[];
}

const CommandCenter = () => {
  // Update API URL
  const API_URL = 'http://192.168.0.200:8000';
  const WS_URL = 'ws://192.168.0.200:8000/ws';

  // State with initial values
  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics>({
    cpu_percent: 0,
    memory_percent: 0,
    disk_usage: 0,
    network_bytes_sent: 0,
    network_bytes_recv: 0,
    memory_used: 0,
    memory_total: 0,
    disk_used: 0,
    disk_total: 0
  });
  const [battleLogs, setBattleLogs] = useState<BattleLog[]>([]);
  const [defenseActions, setDefenseActions] = useState<DefenseAction[]>([]);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected'>('disconnected');
  const wsRef = useRef<WebSocket | null>(null);
  const [currentTime, setCurrentTime] = useState<string>(new Date().toLocaleTimeString());

  // Update time
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date().toLocaleTimeString());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Fetch initial data
  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        // Fetch metrics
        const metricsResponse = await fetch(`${API_URL}/system-metrics`);
        if (metricsResponse.ok) {
          const data: ApiResponse<SystemMetrics> = await metricsResponse.json();
          setSystemMetrics(data.message.content);
        }

        // Fetch battle logs
        const logsResponse = await fetch(`${API_URL}/battle-logs`);
        if (logsResponse.ok) {
          const data: ApiResponse<BattleLog[]> = await logsResponse.json();
          setBattleLogs(data.message.content || []); // Ensure it's at least an empty array
        }

        // Fetch defense actions
        const actionsResponse = await fetch(`${API_URL}/defense-actions`);
        if (actionsResponse.ok) {
          const data: ApiResponse<DefenseAction[]> = await actionsResponse.json();
          setDefenseActions(data.message.content);
        }
      } catch (error) {
        console.error('Error fetching initial data:', error);
      }
    };

    fetchInitialData();
    // Fetch initial data every 5 seconds
    const intervalId = setInterval(fetchInitialData, 5000);

    return () => clearInterval(intervalId);
  }, []);

  // WebSocket connection
  useEffect(() => {
    const connectWebSocket = () => {
      try {
        const ws = new WebSocket(WS_URL);
        wsRef.current = ws;

        ws.onopen = () => {
          console.log('WebSocket Connected');
          setConnectionStatus('connected');
        };

        ws.onmessage = (event) => {
          try {
            const response: ApiResponse<WebSocketMessage> = JSON.parse(event.data);
            const data = response.message.content;
            
            switch (data.type) {
              case 'system_metrics':
                setSystemMetrics(data.data as SystemMetrics);
                break;
              case 'battle_logs':
                const newLogs = Array.isArray(data.data) ? data.data as BattleLog[] : [data.data as BattleLog];
                console.log('Received battle logs:', newLogs); // Debug log
                setBattleLogs(newLogs);
                break;
              case 'defense_actions':
                setDefenseActions(prevActions => {
                  const newActions = Array.isArray(data.data) ? data.data as DefenseAction[] : [data.data as DefenseAction];
                  return [...newActions];
                });
                break;
              case 'initial_data':
                const initialData = data.data as WebSocketData;
                if (initialData.metrics) setSystemMetrics(initialData.metrics);
                if (initialData.logs) {
                  console.log('Received initial logs:', initialData.logs); // Debug log
                  setBattleLogs(initialData.logs);
                }
                if (initialData.defenseActions) setDefenseActions(initialData.defenseActions);
                break;
              default:
                console.warn('Unknown message type:', data.type);
            }
          } catch (error) {
            console.error('Error processing WebSocket message:', error);
          }
        };

        ws.onclose = () => {
          console.log('WebSocket Disconnected');
          setConnectionStatus('disconnected');
          setTimeout(connectWebSocket, 5000);
        };

        ws.onerror = (error) => {
          console.error('WebSocket Error:', error);
          setConnectionStatus('disconnected');
        };
      } catch (error) {
        console.error('WebSocket Connection Error:', error);
        setConnectionStatus('disconnected');
      }
    };

    connectWebSocket();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, []);

  // Format bytes helper function
  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
  };

  // Render battle logs helper
  const renderBattleLogs = () => {
    if (!battleLogs || battleLogs.length === 0) {
      return (
        <div className="text-xs font-mono text-zinc-500 text-center py-4">
          No logs available
        </div>
      );
    }

    return battleLogs.map((log, i) => (
      <div key={`${log.id}-${i}`} className="flex items-start gap-2 pb-2 border-b border-zinc-800">
        <ChevronRight className={`h-4 w-4 ${
          log.severity === 'critical' ? 'text-red-500' :
          log.severity === 'alert' ? 'text-amber-500' :
          log.severity === 'warning' ? 'text-yellow-500' :
          'text-cyan-500'
        }`} />
        <div>
          <div className="text-xs font-mono text-zinc-300">
            {log.message || 'Unknown message'}
          </div>
          <div className="text-[10px] font-mono text-zinc-500">
            {log.timestamp ? new Date(log.timestamp).toLocaleString() : 'Unknown time'}
          </div>
        </div>
      </div>
    ));
  };

  return (
    <div className="min-h-screen bg-zinc-950 p-6">
      {/* Top Bar */}
      <div className="flex justify-between items-center mb-8 border-b border-zinc-800 pb-4">
        <div className="flex items-center gap-4">
          <div className="h-10 w-1 bg-cyan-500" />
          <div>
            <h1 className="text-3xl font-mono tracking-tight text-zinc-100">C2 DEFENDER</h1>
            <div className="flex items-center gap-2 mt-1">
              <div className={`h-2 w-2 rounded-full animate-pulse ${
                connectionStatus === 'connected' ? 'bg-cyan-500' : 'bg-red-500'
              }`} />
              <p className="text-xs font-mono text-zinc-400 tracking-widest">
                OPERATIONAL STATUS: {connectionStatus.toUpperCase()}
              </p>
            </div>
          </div>
        </div>
        <div className="flex items-center gap-6">
          <div className="flex flex-col items-end">
            <div className="text-xs font-mono text-zinc-400">SYSTEM TIME</div>
            <div className="text-sm font-mono text-cyan-500">{currentTime}</div>
          </div>
          <div className="flex gap-2">
            <Wifi className={`h-5 w-5 ${connectionStatus === 'connected' ? 'text-cyan-500' : 'text-red-500'}`} />
            <Radio className="h-5 w-5 text-cyan-500 animate-pulse" />
          </div>
        </div>
      </div>

      {/* Main Grid */}
      <div className="grid grid-cols-12 gap-6">
        {/* Left Column - System Status */}
        <div className="col-span-3 space-y-6">
          <Card className="bg-zinc-900 border-zinc-800">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-mono text-zinc-400 flex items-center gap-2">
                <Box className="h-4 w-4 text-cyan-500" />
                SYSTEM STATUS
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="relative">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs font-mono text-zinc-300">CPU USAGE</span>
                    <span className="text-xs font-mono text-cyan-500">{systemMetrics.cpu_percent}%</span>
                  </div>
                  <Progress value={systemMetrics.cpu_percent} className="h-1" />
                </div>

                <div className="relative">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs font-mono text-zinc-300">MEMORY</span>
                    <span className="text-xs font-mono text-cyan-500">{systemMetrics.memory_percent}%</span>
                  </div>
                  <Progress value={systemMetrics.memory_percent} className="h-1" />
                  <div className="text-[10px] font-mono text-zinc-500 mt-1">
                    {formatBytes(systemMetrics.memory_used || 0)} / {formatBytes(systemMetrics.memory_total || 0)}
                  </div>
                </div>

                <div className="relative">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs font-mono text-zinc-300">DISK USAGE</span>
                    <span className="text-xs font-mono text-cyan-500">{systemMetrics.disk_usage}%</span>
                  </div>
                  <Progress value={systemMetrics.disk_usage} className="h-1" />
                  <div className="text-[10px] font-mono text-zinc-500 mt-1">
                    {formatBytes(systemMetrics.disk_used || 0)} / {formatBytes(systemMetrics.disk_total || 0)}
                  </div>
                </div>

                <div className="relative">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs font-mono text-zinc-300">NETWORK I/O</span>
                    <span className="text-xs font-mono text-cyan-500">
                      ↑{formatBytes(systemMetrics.network_bytes_sent)}/s
                    </span>
                  </div>
                  <Progress value={75} className="h-1" />
                  <div className="text-[10px] font-mono text-zinc-500 mt-1">
                    ↓{formatBytes(systemMetrics.network_bytes_recv)}/s
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Center Column - Main Display */}
        <div className="col-span-6 space-y-6">
          {battleLogs.some(log => log.severity === 'critical' || log.severity === 'alert') && (
            <Alert className="bg-red-950/30 border-red-900/50 text-red-200">
              <AlertTriangle className="h-4 w-4 text-red-500" />
              <AlertDescription className="text-xs font-mono ml-2">
                CRITICAL: ACTIVE THREATS DETECTED - DEFENSE PROTOCOLS ENGAGED
              </AlertDescription>
            </Alert>
          )}

          {/* Threat Analysis */}
          <Card className="bg-zinc-900 border-zinc-800">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-mono text-zinc-400">THREAT ANALYSIS</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-3 gap-4">
                  <div className="bg-zinc-800 p-4 rounded-lg">
                    <div className="text-2xl font-mono text-cyan-500 mb-1">
                      {battleLogs.filter(log => log.severity === 'warning' || log.severity === 'alert').length}
                    </div>
                    <div className="text-xs font-mono text-zinc-400">ATTACKS DETECTED</div>
                  </div>
                  <div className="bg-zinc-800 p-4 rounded-lg">
                    <div className="text-2xl font-mono text-emerald-500 mb-1">
                      {battleLogs.filter(log => log.severity === 'info').length}
                    </div>
                    <div className="text-xs font-mono text-zinc-400">THREATS NEUTRALIZED</div>
                  </div>
                  <div className="bg-zinc-800 p-4 rounded-lg">
                    <div className="text-2xl font-mono text-red-500 mb-1">
                      {battleLogs.filter(log => log.severity === 'critical').length}
                    </div>
                    <div className="text-xs font-mono text-zinc-400">ACTIVE BREACHES</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Code Viewer */}
          <CodeViewer defenseActions={defenseActions} />
        </div>

        {/* Right Column - Battle Log */}
        <div className="col-span-3">
          <Card className="bg-zinc-900 border-zinc-800">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-mono text-zinc-400 flex items-center gap-2">
                <Terminal className="h-4 w-4 text-cyan-500" />
                BATTLE LOG {battleLogs.length > 0 && `(${battleLogs.length})`}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 max-h-[800px] overflow-y-auto">
                {renderBattleLogs()}
              </div>
            </CardContent>
          </Card>

          {/* Additional Status Cards */}
          <div className="mt-6">
            <Card className="bg-zinc-900 border-zinc-800">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-mono text-zinc-400 flex items-center gap-2">
                  <Shield className="h-4 w-4 text-cyan-500" />
                  DEFENSE STATUS
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-xs font-mono text-zinc-300">FIREWALL</span>
                    <span className="text-xs font-mono text-emerald-500">ACTIVE</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs font-mono text-zinc-300">IDS/IPS</span>
                    <span className="text-xs font-mono text-emerald-500">MONITORING</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs font-mono text-zinc-300">ENCRYPTION</span>
                    <span className="text-xs font-mono text-emerald-500">ENABLED</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs font-mono text-zinc-300">BACKUP</span>
                    <span className="text-xs font-mono text-yellow-500">SCHEDULED</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Active Connections */}
          <div className="mt-6">
            <Card className="bg-zinc-900 border-zinc-800">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-mono text-zinc-400 flex items-center gap-2">
                  <Network className="h-4 w-4 text-cyan-500" />
                  ACTIVE CONNECTIONS
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="text-2xl font-mono text-cyan-500">
                    {connectionStatus === 'connected' ? 'ONLINE' : 'OFFLINE'}
                  </div>
                  <div className="text-xs font-mono text-zinc-400">
                    Last Updated: {new Date().toLocaleTimeString()}
                  </div>
                  <div className="mt-4 space-y-2">
                    <div className="flex items-center gap-2">
                      <div className={`h-2 w-2 rounded-full ${connectionStatus === 'connected' ? 'bg-emerald-500' : 'bg-red-500'}`} />
                      <span className="text-xs font-mono text-zinc-300">Main Sensor Array</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className={`h-2 w-2 rounded-full ${connectionStatus === 'connected' ? 'bg-emerald-500' : 'bg-red-500'}`} />
                      <span className="text-xs font-mono text-zinc-300">Defense Grid</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className={`h-2 w-2 rounded-full ${connectionStatus === 'connected' ? 'bg-emerald-500' : 'bg-red-500'}`} />
                      <span className="text-xs font-mono text-zinc-300">Command Link</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CommandCenter;
--------------------------------------------------------------------------------


File: src/components/ui/alert.tsx

--------------------------------------------------------------------------------
// src/components/ui/alert.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, children, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(
      "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
      className
    )}
    {...props}
  >
    {children}
  </div>
))
Alert.displayName = "Alert"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertDescription }
--------------------------------------------------------------------------------


File: src/components/ui/card.tsx

--------------------------------------------------------------------------------
// src/components/ui/card.tsx
import * as React from "react"

interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={`rounded-lg border bg-card text-card-foreground shadow-sm ${className}`}
        {...props}
      />
    )
  }
)
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex flex-col space-y-1.5 p-6 ${className}`}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={`text-2xl font-semibold leading-none tracking-tight ${className}`}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
))
CardContent.displayName = "CardContent"

export { Card, CardHeader, CardTitle, CardContent }
--------------------------------------------------------------------------------


File: src/components/ui/progress.tsx

--------------------------------------------------------------------------------
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-gray-700",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-green-500 transition-all duration-300"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = "Progress"

export { Progress }
--------------------------------------------------------------------------------


File: src/lib/utils.ts

--------------------------------------------------------------------------------
// src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
--------------------------------------------------------------------------------


File: next.config.js

--------------------------------------------------------------------------------
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig
--------------------------------------------------------------------------------


File: postcss.config.js

--------------------------------------------------------------------------------
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--------------------------------------------------------------------------------


File: postcss.config.mjs

--------------------------------------------------------------------------------
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

--------------------------------------------------------------------------------


File: README.md

--------------------------------------------------------------------------------
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

--------------------------------------------------------------------------------


File: requirements.txt

--------------------------------------------------------------------------------
fastapi==0.104.1
uvicorn==0.24.0
websockets==12.0
psutil==5.9.6
python-dotenv==1.0.0
pydantic==2.4.2
--------------------------------------------------------------------------------


File: tailwind.config.js

--------------------------------------------------------------------------------
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './src/pages/**/*.{ts,tsx}',
    './src/components/**/*.{ts,tsx}',
    './src/app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [],
}
--------------------------------------------------------------------------------


File: tsconfig.json

--------------------------------------------------------------------------------
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--------------------------------------------------------------------------------
